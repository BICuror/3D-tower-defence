//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""TouchInput"",
            ""id"": ""83b0a702-3d20-4c1d-85da-e2b1105b3f92"",
            ""actions"": [
                {
                    ""name"": ""FirstTouch"",
                    ""type"": ""Value"",
                    ""id"": ""b95f2d87-3d44-4d42-b41e-19498768dfef"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SecondTouch"",
                    ""type"": ""Value"",
                    ""id"": ""238876c8-2d75-4b31-a1d7-53592f9490b2"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""FirstTouchEvent"",
                    ""type"": ""Button"",
                    ""id"": ""f9e6ee71-80fb-438c-82c2-59953b554c6a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SecondTouchEvent"",
                    ""type"": ""Button"",
                    ""id"": ""5690afad-3876-4da2-ac1c-620ed0b9bd97"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""faddaf1e-b112-4ead-b854-33207c43099b"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FirstTouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fc86d719-af7a-4feb-a011-f6585e66b045"",
                    ""path"": ""<Touchscreen>/touch0/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FirstTouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2fc06d78-4ee7-478a-a232-271ca1e9ad56"",
                    ""path"": ""<Touchscreen>/touch1/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SecondTouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""37a31609-f2e0-4531-b531-2b79bc820eb1"",
                    ""path"": ""<Touchscreen>/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FirstTouchEvent"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""be2bb755-fa13-429f-be41-2a7028d557b4"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FirstTouchEvent"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8da603ba-c7b0-40d4-a7f2-e6049b71b104"",
                    ""path"": ""<Touchscreen>/touch1/tap"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SecondTouchEvent"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // TouchInput
        m_TouchInput = asset.FindActionMap("TouchInput", throwIfNotFound: true);
        m_TouchInput_FirstTouch = m_TouchInput.FindAction("FirstTouch", throwIfNotFound: true);
        m_TouchInput_SecondTouch = m_TouchInput.FindAction("SecondTouch", throwIfNotFound: true);
        m_TouchInput_FirstTouchEvent = m_TouchInput.FindAction("FirstTouchEvent", throwIfNotFound: true);
        m_TouchInput_SecondTouchEvent = m_TouchInput.FindAction("SecondTouchEvent", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // TouchInput
    private readonly InputActionMap m_TouchInput;
    private List<ITouchInputActions> m_TouchInputActionsCallbackInterfaces = new List<ITouchInputActions>();
    private readonly InputAction m_TouchInput_FirstTouch;
    private readonly InputAction m_TouchInput_SecondTouch;
    private readonly InputAction m_TouchInput_FirstTouchEvent;
    private readonly InputAction m_TouchInput_SecondTouchEvent;
    public struct TouchInputActions
    {
        private @Controls m_Wrapper;
        public TouchInputActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @FirstTouch => m_Wrapper.m_TouchInput_FirstTouch;
        public InputAction @SecondTouch => m_Wrapper.m_TouchInput_SecondTouch;
        public InputAction @FirstTouchEvent => m_Wrapper.m_TouchInput_FirstTouchEvent;
        public InputAction @SecondTouchEvent => m_Wrapper.m_TouchInput_SecondTouchEvent;
        public InputActionMap Get() { return m_Wrapper.m_TouchInput; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TouchInputActions set) { return set.Get(); }
        public void AddCallbacks(ITouchInputActions instance)
        {
            if (instance == null || m_Wrapper.m_TouchInputActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TouchInputActionsCallbackInterfaces.Add(instance);
            @FirstTouch.started += instance.OnFirstTouch;
            @FirstTouch.performed += instance.OnFirstTouch;
            @FirstTouch.canceled += instance.OnFirstTouch;
            @SecondTouch.started += instance.OnSecondTouch;
            @SecondTouch.performed += instance.OnSecondTouch;
            @SecondTouch.canceled += instance.OnSecondTouch;
            @FirstTouchEvent.started += instance.OnFirstTouchEvent;
            @FirstTouchEvent.performed += instance.OnFirstTouchEvent;
            @FirstTouchEvent.canceled += instance.OnFirstTouchEvent;
            @SecondTouchEvent.started += instance.OnSecondTouchEvent;
            @SecondTouchEvent.performed += instance.OnSecondTouchEvent;
            @SecondTouchEvent.canceled += instance.OnSecondTouchEvent;
        }

        private void UnregisterCallbacks(ITouchInputActions instance)
        {
            @FirstTouch.started -= instance.OnFirstTouch;
            @FirstTouch.performed -= instance.OnFirstTouch;
            @FirstTouch.canceled -= instance.OnFirstTouch;
            @SecondTouch.started -= instance.OnSecondTouch;
            @SecondTouch.performed -= instance.OnSecondTouch;
            @SecondTouch.canceled -= instance.OnSecondTouch;
            @FirstTouchEvent.started -= instance.OnFirstTouchEvent;
            @FirstTouchEvent.performed -= instance.OnFirstTouchEvent;
            @FirstTouchEvent.canceled -= instance.OnFirstTouchEvent;
            @SecondTouchEvent.started -= instance.OnSecondTouchEvent;
            @SecondTouchEvent.performed -= instance.OnSecondTouchEvent;
            @SecondTouchEvent.canceled -= instance.OnSecondTouchEvent;
        }

        public void RemoveCallbacks(ITouchInputActions instance)
        {
            if (m_Wrapper.m_TouchInputActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITouchInputActions instance)
        {
            foreach (var item in m_Wrapper.m_TouchInputActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TouchInputActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TouchInputActions @TouchInput => new TouchInputActions(this);
    public interface ITouchInputActions
    {
        void OnFirstTouch(InputAction.CallbackContext context);
        void OnSecondTouch(InputAction.CallbackContext context);
        void OnFirstTouchEvent(InputAction.CallbackContext context);
        void OnSecondTouchEvent(InputAction.CallbackContext context);
    }
}
